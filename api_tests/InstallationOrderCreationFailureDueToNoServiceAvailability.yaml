# ********RoostGPT********

# Test generated by RoostGPT for test dm-vtal using AI Type Azure Open AI and AI Model roostgpt-4-32k
# 
# ROOST_METHOD_HASH=94cf0559d6
# ROOST_METHOD_SIG_HASH=04b6a89eb6
# 
#    ########## Scenario ##########  
# 
# {
#   feature: 'Feature: Installation Order Processing',
#   background: null,
#   rule: null,
#   scenario: {
#     title: 'Scenario: Installation Order Creation Failure due to No Service Availability',
#     steps: 'Given the user has a valid geographic address\n' +
#       'When the user retrieves the address details using the Geographic Address Management API\n' +
#       'And the user retrieves the address complements using the Geographic Address Management API\n' +
#       'And the user checks the service availability for the address using the Resource Pool Management API\n' +
#       'And the service is not available for the address\n' +
#       'Then the installation order creation should fail\n' +
#       'And an appropriate error message should be provided indicating no service availability\n' +
#       '\n' +
#       '# High-level description of the expected behavior for each scenario:\n' +
#       '# \n' +
#       '# Successful Installation Order Creation:\n' +
#       '# \n' +
#       '# The user provides a valid geographic address.\n' +
#       '# The address details and complements are retrieved using the Geographic Address Management API.\n' +
#       '# The service availability is checked for the address using the Resource Pool Management API.\n' +
#       '# If the service is available, the user proceeds to search for available appointment slots using the Appointment API.\n' +
#       '# The user selects a suitable appointment slot and creates an appointment using the Appointment API.\n' +
#       '# The user places an installation order with the appointment details using the ProductOrdering API.\n' +
#       '# The installation order should be created successfully and associated with the selected appointment.\n' +
#       '# \n' +
#       '# \n' +
#       '# Installation Order Creation with Partial Service Availability:\n' +
#       '# \n' +
#       '# Similar to the successful scenario, but the service availability check indicates partial availability for the address.\n' +
#       '# The user proceeds with the appointment booking and order placement.\n' +
#       '# The installation order should be created successfully, associated with the selected appointment, and indicate partial service availability.\n' +
#       '# \n' +
#       '# \n' +
#       '# Installation Order Creation Failure due to No Service Availability:\n' +
#       '# \n' +
#       '# The user provides a valid geographic address.\n' +
#       '# The address details and complements are retrieved using the Geographic Address Management API.\n' +
#       '# The service availability is checked for the address using the Resource Pool Management API.\n' +
#       '# If the service is not available for the address, the installation order creation should fail.\n' +
#       '# An appropriate error message should be provided to the user indicating that the service is not available for the given address.\n' +
#       '# \n' +
#       '# \n' +
#       '# \n' +
#       '# These scenarios cover the main paths of the installation order creation process based on the provided API flow diagram, considering different service availability scenarios.',
#     examples: ''
#   }
# }
# 

# ********RoostGPT********
config:
  target: "{{ $processEnvironment.API_HOST }}"
  phases:
    - duration: 60
      arrivalRate: 20
  plugins:
    expect: {}
  payload:
    path: "InstallationOrderCreationFailureDueToNoServiceAvailability.csv"
    fields:
      - addressId
      - associatedDocument
      - startDate
      - finishDate
      - orderType
    skipHeader: true
    delimiter: "^|^"
scenarios:
  - name: "Installation Order Creation Failure due to No Service Availability"
    flow:
      - post:
          url: "/appointment"
          headers:
            Authorization: "Bearer {{ $processEnvironment.AUTH_TOKEN }}"
          json:
            reason: "{{ reason }}"
            slot:
              id: "{{ slotId }}"
          expect:
            - statusCode: 201
            - hasProperty: 'appointment.id'
          log: "Appointment created"
      - think: 1

      - delete:
          url: "/appointment/{{ appointmentId }}"
          headers:
            Authorization: "Bearer {{ $processEnvironment.AUTH_TOKEN }}"
          expect:
            - statusCode: 200
          log: "Appointment deleted"
      - think: 1

      - get:
          url: "/appointment/{{ appointmentId }}"
          headers:
            Authorization: "Bearer {{ $processEnvironment.AUTH_TOKEN }}"
          expect:
            - statusCode: 200
          log: "Appointment retrieved"
      - think: 1

      - patch:
          url: "/appointment/{{ appointmentId }}"
          headers:
            Authorization: "Bearer {{ $processEnvironment.AUTH_TOKEN }}"
          json:
            reason: "{{ reason }}"
            slot:
              id: "{{ slotId }}"
          expect:
            - statusCode: 200
          log: "Appointment updated"
      - think: 1

      - delete:
          url: "/appointment/{{ appointmentId }}"
          headers:
            Authorization: "Bearer {{ $processEnvironment.AUTH_TOKEN }}"
          expect:
            - statusCode: 200
          log: "Appointment deleted"
      - think: 1

      - post:
          url: "/appointmentConfirmation"
          headers:
            Authorization: "Bearer {{ $processEnvironment.AUTH_TOKEN }}"
          json:
            confirmation: "{{ confirmation }}"
            id: "{{ id }}"
          expect:
            - statusCode: 200
          log: "Appointment confirmed"
      - think: 1

      - get:
          url: "/searchTimeSlot?addressId={{ addressId }}&associatedDocument={{ associatedDocument }}&startDate={{ startDate }}&finishDate={{ finishDate }}&orderType={{ orderType }}"
          headers:
            Authorization: "Bearer {{ $processEnvironment.AUTH_TOKEN }}"
          expect:
            - statusCode: 200
          log: "Time slot searched"
      - think: 1

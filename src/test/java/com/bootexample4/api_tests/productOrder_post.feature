# ********RoostGPT********

# Test generated by RoostGPT for test apiFulfillment using AI Type Claude AI and AI Model claude-3-opus-20240229
# 
# Feature file generated for /productOrder_post for http method type POST 
# RoostTestHash=98c6afd708
# 
# 

# ********RoostGPT********
Feature: Test /productOrder endpoint

  Background:
    * def urlBase = karate.properties['url.base'] || karate.get('urlBase', 'http://localhost:4010')
    * url urlBase
    * def authToken = karate.properties['AUTH_TOKEN']
    * configure headers = { Authorization: '#(authToken)' }

  Scenario Outline: Create a product order with valid request
    * def requestBody = <request>
    Given path '/productOrder'
    And request requestBody
    When method POST
    Then status 201
    And match response ==
      """
      {
        control: { 
          code: '201', 
          message: 'Created', 
          type: 'S' 
        },
        order: { 
          id: '#string'
        }
      }
      """
    And match responseHeaders['Content-Type'][0] contains 'application/json'

    Examples:
      | read('productOrder_post.csv') |

  Scenario Outline: Create a product order with invalid request
    * def requestBody = <request>
    Given path '/productOrder'
    And request requestBody
    When method POST
    Then status <expectedStatus>
    And match response == <expectedResponse>
    And match responseHeaders['Content-Type'][0] contains 'application/json'

    Examples:
      | read('productOrder_post.csv') |

  Scenario: Create a product order with unauthorized credentials
    Given path '/productOrder'
    And request read('classpath:examples/associate-cpe-order-type-fttp.json')
    When method POST
    Then status 403
    And match response ==
      """
      {
        control: {
          code: '403',
          message: 'Aplicação não autorizada ou não informada!',
          type: 'E'
        }
      }
      """
    And match responseHeaders['Content-Type'][0] contains 'application/json'

  Scenario: Create a product order with invalid or expired credentials
    * configure headers = { Authorization: 'invalid-token' }
    Given path '/productOrder'
    And request read('classpath:examples/associate-cpe-order-type-fttp.json')
    When method POST
    Then status 403
    And match response ==
      """
      {
        control: {
          code: '403',
          message: 'Forbidden - Scope Not Permitted',
          type: 'E'
        }
      }
      """
    And match responseHeaders['Content-Type'][0] contains 'application/json'

  Scenario: Create a product order exceeding quota
    * def requestBody = read('classpath:examples/associate-cpe-order-type-fttp.json')
    Given path '/productOrder'
    And request requestBody
    When method POST
    Then status 429
    And match response ==
      """
      {
        control: {
          code: '429',
          message: 'Too Many Requests - Exceeded Quota',
          type: 'E'
        }
      }
      """
    And match responseHeaders['Content-Type'][0] contains 'application/json'

# ********RoostGPT********

# Test generated by RoostGPT for test apiFulfillment using AI Type Claude AI and AI Model claude-3-opus-20240229
# 
# Feature file generated for /listener/productOrderStateChangeEvent_post for http method type POST 
# RoostTestHash=a9bfb68d42
# 
# 

# ********RoostGPT********
Feature: Test /listener/productOrderStateChangeEvent endpoint

  Background:
    * def urlBase = karate.properties['url.base'] || karate.get('urlBase', 'http://localhost:4010')
    * url urlBase
    * configure headers = { Authorization: #(karate.properties['AUTH_TOKEN']) }

  Scenario Outline: Notify state change event by client
    Given path '/listener/productOrderStateChangeEvent'
    And request
      """
      {
        "notification": {
          "customer": {
            "subscriberId": "<subscriberId>"
          },
          "date": "<date>",
          "order": {
            "associatedDocument": "<associatedDocument>",
            "code": "<code>",
            "correlationOrder": "<correlationOrder>",
            "description": "<description>",
            "id": "<id>",
            "lostEquipment": "<lostEquipment>",
            "resource": {
              "devices": {
                "device": [
                  {
                    "category": "<category>",
                    "description": "<deviceDescription>",
                    "resourceCharacteristic": [
                      {
                        "name": "<characteristicName1>",
                        "value": "<characteristicValue1>"
                      },
                      {
                        "name": "<characteristicName2>",
                        "value": "<characteristicValue2>"
                      }
                    ],
                    "startOperatingDate": "<startOperatingDate>",
                    "state": "<state>",
                    "type": "<type>",
                    "usageState": "<usageState>"
                  }
                ]
              },
              "fiberPath": {
                "items": {
                  "item": [
                    {
                      "name": "<itemName1>",
                      "value": "<itemValue1>"
                    },
                    {
                      "name": "<itemName2>",
                      "value": "<itemValue2>"
                    }
                  ]
                }
              },
              "gponAccess": "<gponAccess>"
            },
            "type": "<orderType>"
          }
        }
      }
      """
    When method POST
    Then status 204

    Examples:
      | read('listener_productOrderStateChangeEvent_post.csv') |

  Scenario: Notify state change event with invalid request body
    Given path '/listener/productOrderStateChangeEvent'
    And request {}
    When method POST
    Then status 400

  Scenario: Notify state change event with unauthorized request
    * configure headers = {}
    Given path '/listener/productOrderStateChangeEvent'
    And request
      """
      {
        "notification": {
          "customer": {
            "subscriberId": "234567654"
          },
          "date": "2021-09-29T18:42:24.641-03:00",
          "order": {
            "associatedDocument": "VTT001",
            "code": "2",
            "correlationOrder": "10",
            "description": "Ordem cancelada",
            "id": "20230315000001",
            "type": "Cancelamento"
          }
        }
      }
      """
    When method POST
    Then status 401

  Scenario: Notify state change event with server error
    Given path '/listener/productOrderStateChangeEvent'
    And request
      """
      {
        "notification": {
          "customer": {
            "subscriberId": "234567654"
          },
          "date": "2021-09-29T18:42:24.641-03:00",
          "order": {
            "associatedDocument": "VTT001",
            "code": "2",
            "correlationOrder": "10",
            "description": "Ordem cancelada",
            "id": "20230315000001",
            "type": "Cancelamento"
          }
        }
      }
      """
    When method POST
    Then status 500

  Scenario: Notify state change event with service unavailable
    Given path '/listener/productOrderStateChangeEvent'
    And request
      """
      {
        "notification": {
          "customer": {
            "subscriberId": "234567654"
          },
          "date": "2021-09-29T18:42:24.641-03:00",
          "order": {
            "associatedDocument": "VTT001",
            "code": "2",
            "correlationOrder": "10",
            "description": "Ordem cancelada",
            "id": "20230315000001",
            "type": "Cancelamento"
          }
        }
      }
      """
    When method POST
    Then status 503

  Scenario: Notify state change event with request timeout
    Given path '/listener/productOrderStateChangeEvent'
    And request
      """
      {
        "notification": {
          "customer": {
            "subscriberId": "234567654"
          },
          "date": "2021-09-29T18:42:24.641-03:00",
          "order": {
            "associatedDocument": "VTT001",
            "code": "2",
            "correlationOrder": "10",
            "description": "Ordem cancelada",
            "id": "20230315000001",
            "type": "Cancelamento"
          }
        }
      }
      """
    When method POST
    Then status 504

# ********RoostGPT********

# Test generated by RoostGPT for test vtal_api_flow using AI Type Claude AI and AI Model claude-3-5-sonnet-20240620
# 
# ROOST_METHOD_HASH=1c974c8238
# ROOST_METHOD_SIG_HASH=fb8a25e157
# 
#  ########## Scenario ########## 
# 
# {
#   feature: 'Feature: Installation Order Processing',
#   background: null,
#   rule: null,
#   scenario: {
#     title: 'Scenario: Installation Order Creation with Partial Service Availability',
#     steps: 'Given the user has a valid geographic address\n' +
#       'When the user retrieves the address details using the Geographic Address Management API\n' +
#       'And the user retrieves the address complements using the Geographic Address Management API\n' +
#       'And the user checks the service availability for the address using the Resource Pool Management API\n' +
#       'And the service is partially available for the address\n' +
#       'And the user searches for available appointment slots using the Appointment API\n' +
#       'And selects a suitable appointment slot\n' +
#       'And creates an appointment with the selected slot using the Appointment API\n' +
#       'And places an installation order with the appointment details using the ProductOrdering API\n' +
#       'Then the installation order should be created successfully\n' +
#       'And the order should be associated with the selected appointment\n' +
#       'And the order should indicate partial service availability',
#     examples: ''
#   }
# }
# 

# ********RoostGPT********
Feature: Installation Order Processing

  Scenario: Installation Order Creation with Partial Service Availability
    Given the base URL is set
    * def urlBase = karate.properties['url.base'] || karate.get('urlBase', 'http://localhost:4010')
    * url urlBase
    When retrieving address details
    * path '/geographicAddress'
    * param address = 'Rua do Lavradio Rio de Janeiro'
    * param number = '71'
    * method GET
    * status 200
    * match response.addresses.address[0].id == '#present'
    * def addressId = response.addresses.address[0].id
    And retrieving address complements
    * path '/addressComplements/' + addressId
    * method GET
    * status 200
    * match response.complementList != null
    And searching for available appointment slots
    * path '/searchTimeSlot'
    * param addressId = addressId
    * param associatedDocument = 'VTT001'
    * param startDate = '2023-07-01T00:00:00'
    * param finishDate = '2023-07-14T23:59:59'
    * param orderType = 'Instalacao'
    * param productType = 'Banda Larga'
    * method GET
    * status 200
    * match response.slots != null
    * match response.slots[0].id == '#present'
    * def slotId = response.slots[0].id
    And creating an appointment
    * path '/appointment'
    * request
      """
      {
        "appointment": {
          "reason": "Agendamento para Instalação de Fibra",
          "slot": {
            "id": "#(slotId)"
          }
        }
      }
      """
    * method POST
    * status 201
    * match response.appointment.id == '#present'
    * def appointmentId = response.appointment.id
    Then placing an installation order
    * path '/productOrder'
    * request
      """
      {
        "order": {
          "addresses": {
            "address": {
              "id": "#(addressId)",
              "inventoryId": "1766156",
              "complement": {
                "complements": [
                  {
                    "type": "ES",
                    "value": "ARC201"
                  }
                ]
              },
              "reference": "Do lado da padaria"
            }
          },
          "appointment": {
            "date": "#(response.appointment.startDate)",
            "hasSlot": true,
            "mandatoryType": "Obrigatorio",
            "workOrderId": "#(appointmentId)"
          },
          "associatedDocument": "VTT001",
          "associatedDocumentDate": "2023-07-01T18:20:53-03:00",
          "correlationOrder": "10",
          "customer": {
            "businessUnity": "varejo",
            "fantasyName": "InterHome Internet",
            "name": "Sandbox V.tal",
            "phoneNumber": {
              "phoneNumbers": [
                "000000000",
                "",
                ""
              ]
            },
            "subscriberId": "SVTAL001",
            "workContact": {
              "email": "sindicovtal@vtal.com",
              "name": "sindico Vtal",
              "phone": "21999900000"
            }
          },
          "infraType": "FTTH",
          "products": {
            "product": [
              {
                "action": "adicionar",
                "catalogId": "BL_200MB"
              }
            ]
          },
          "type": "Instalacao"
        }
      }
      """
    * method POST
    * status 201
    * match response.control.code == '201'
    * match response.order.id == '#present'
    * match response.control.message == 'Created'
    * match response.order.id != null

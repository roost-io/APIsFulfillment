# ********RoostGPT********

# Test generated by RoostGPT for test vtal_api_flow using AI Type Claude AI and AI Model claude-3-5-sonnet-20240620
# 
# ROOST_METHOD_HASH=a7f3309583
# ROOST_METHOD_SIG_HASH=395334ba50
# 
#  ########## Scenario ########## 
# 
# {
#   feature: 'Feature: Installation Order Processing',
#   background: null,
#   rule: null,
#   scenario: {
#     title: 'Scenario: Successful Installation Order Creation',
#     steps: 'Given the user has a valid geographic address\n' +
#       'When the user retrieves the address details using the Geographic Address Management API\n' +
#       'And the user retrieves the address complements using the Geographic Address Management API\n' +
#       'And the user checks the service availability for the address using the Resource Pool Management API\n' +
#       'And the service is available for the address\n' +
#       'And the user searches for available appointment slots using the Appointment API\n' +
#       'And selects a suitable appointment slot\n' +
#       'And creates an appointment with the selected slot using the Appointment API\n' +
#       'And places an installation order with the appointment details using the ProductOrdering API\n' +
#       'Then the installation order should be created successfully\n' +
#       'And the order should be associated with the selected appointment',
#     examples: ''
#   }
# }
# 

# ********RoostGPT********
Feature: Installation Order Processing

  Scenario: Successful Installation Order Creation
    Given def urlBase = karate.properties['url.base'] || karate.get('urlBase', 'http://localhost:4010')
    * url urlBase
  # Retrieve address details
    Given path '/geographicAddress/14393'
    When method GET
    Then status 200
    And match response.address.id == '14393'
    * def addressDetails = response.address
  # Retrieve address complements
    Given path '/addressComplements/14393'
    When method GET
    Then status 200
    And match response.complementList != null
    * def addressComplements = response.complementList
  # Search for available appointment slots
    Given path '/searchTimeSlot'
    And param addressId = '17713'
    And param associatedDocument = 'VTT001'
    And param startDate = '2021-05-21T13:00:00'
    And param finishDate = '2021-06-04T13:00:00'
    And param orderType = 'Instalacao'
    And param productType = ['Banda Larga']
    When method GET
    Then status 200
    And match response.slots != null
    * def availableSlots = response.slots
    * def selectedSlot = availableSlots[0]
  # Create an appointment
    Given path '/appointment'
    And request
      """
      {
        "appointment": {
          "reason": "Agendamento para Instalação de Fibra",
          "slot": {
            "id": "#(selectedSlot.id)"
          }
        }
      }
      """
    When method POST
    Then status 201
    And match response.appointment.id != null
    * def appointmentId = response.appointment.id
  # Place an installation order
    Given path '/productOrder'
    And request
      """
      {
        "order": {
          "addresses": {
            "address": {
              "id": "#(addressDetails.id)",
              "inventoryId": "#(addressDetails.inventoryId)"
            }
          },
          "appointment": {
            "date": "#(selectedSlot.startDate)",
            "hasSlot": true,
            "mandatoryType": "Obrigatorio",
            "workOrderId": "#(appointmentId)"
          },
          "associatedDocument": "VTT001",
          "associatedDocumentDate": "2021-06-09T18:20:53-03:00",
          "correlationOrder": "10",
          "customer": {
            "businessUnity": "varejo",
            "fantasyName": "InterHome Internet",
            "name": "Sandbox V.tal",
            "phoneNumber": {
              "phoneNumbers": ["000000000", "", ""]
            },
            "subscriberId": "SVTAL001",
            "workContact": {
              "email": "sindicovtal@vtal.com",
              "name": "sindico Vtal",
              "phone": "21999900000"
            }
          },
          "infraType": "FTTH",
          "products": {
            "product": [
              {
                "action": "adicionar",
                "catalogId": "BL_200MB"
              }
            ]
          },
          "type": "Instalacao"
        }
      }
      """
    When method POST
    Then status 201
    And match response.control.code == '201'
    And match response.order.id != null
    * def orderId = response.order.id
  # Verify the order is associated with the appointment
    Given path '/appointment/' + appointmentId
    When method GET
    Then status 200
    And match response.appointments.id == appointmentId
    And match response.appointments.occurrences[0].reason contains 'Instalação'

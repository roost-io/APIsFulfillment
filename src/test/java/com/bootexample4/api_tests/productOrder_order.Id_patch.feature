# ********RoostGPT********

# Test generated by RoostGPT for test apiFulfillment using AI Type Claude AI and AI Model claude-3-opus-20240229
# 
# Feature file generated for /productOrder/{order.Id}_patch for http method type PATCH 
# RoostTestHash=9e8fcf3d77
# 
# 

# ********RoostGPT********
Feature: Update Product Order By Id

  Background:
    * def urlBase = karate.properties['url.base'] || karate.get('urlBase', 'http://localhost:4010')
    * url urlBase

  Scenario Outline: Patch Product Order with valid request
    * def authToken = karate.properties['AUTH_TOKEN']
    Given path '/productOrder/<order.Id>'
    And header Authorization = authToken
    And request
      """
      {
        "order": {
          "appointment": {
            "date": "<appointment.date>",
            "hasSlot": <appointment.hasSlot>,
            "mandatoryType": "<appointment.mandatoryType>",
            "workOrderId": "<appointment.workOrderId>"
          },
          "associatedDocument": "<associatedDocument>",
          "correlationOrder": <correlationOrder>,
          "issue": {
            "action": "<issue.action>",
            "code": <issue.code>,
            "observation": "<issue.observation>",
            "updateDate": "<issue.updateDate>"        
          }
        }
      }
      """
    When method PATCH
    Then status 200
    And match response ==
      """
      {
        "control": {
          "code": "200",
          "message": "OK",
          "type": "S"
        }
      }
      """

    Examples:
      | read('productOrder_order.Id_patch.csv') |

  Scenario Outline: Patch Product Order with invalid request
    * def authToken = karate.properties['AUTH_TOKEN']
    Given path '/productOrder/<order.Id>'
    And header Authorization = authToken
    And request
      """
      {
        "order": {
          "appointment": {
            "date": "<appointment.date>",
            "hasSlot": <appointment.hasSlot>,
            "mandatoryType": "<appointment.mandatoryType>",
            "workOrderId": "<appointment.workOrderId>"
          },
          "associatedDocument": "<associatedDocument>",
          "correlationOrder": <correlationOrder>,
          "issue": {
            "action": "<issue.action>",
            "code": <issue.code>,
            "observation": "<issue.observation>",
            "updateDate": "<issue.updateDate>"        
          }
        }
      }
      """
    When method PATCH
    Then status <expectedStatus>
    And match response ==
      """
      {
        "control": {
          "code": "<expectedCode>",
          "message": "<expectedMessage>",
          "type": "<expectedType>"
        }
      }
      """

    Examples:
      | read('productOrder_order.Id_patch.csv') |

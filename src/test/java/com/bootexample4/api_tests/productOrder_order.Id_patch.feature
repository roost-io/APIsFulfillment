# ********RoostGPT********

# Test generated by RoostGPT for test apiFulfillment using AI Type Claude AI and AI Model claude-3-opus-20240229
# 
# Feature file generated for /productOrder/{order.Id}_patch for http method type PATCH 
# RoostTestHash=9e8fcf3d77
# 
# 

# ********RoostGPT********
Feature: Update Product Order By Id

  Background:
    * def urlBase = karate.properties['url.base'] || karate.get('urlBase', 'http://localhost:4010')
    * url urlBase
    * def authToken = karate.properties['AUTH_TOKEN']
    * configure headers = { 'Authorization': '#(authToken)' }

  Scenario Outline: Update product order with various request payloads
    Given path '/productOrder/<order.Id>'
    And request
      """
      {
        "order": {
          "appointment": {
            "date": "<appointment.date>",
            "hasSlot": <appointment.hasSlot>,
            "mandatoryType": "<appointment.mandatoryType>",
            "workOrderId": "<appointment.workOrderId>"
          },
          "associatedDocument": "<associatedDocument>",
          "correlationOrder": "<correlationOrder>",
          "issue": {
            "action": "<issue.action>",
            "code": "<issue.code>",
            "observation": "<issue.observation>",
            "updateDate": "<issue.updateDate>"
          }
        }
      }
      """
    When method PATCH
    Then status 200
    And match response ==
      """
      {
        "control": {
          "code": "200",
          "message": "OK",
          "type": "S"
        }
      }
      """
    And match responseHeaders['Content-Type'][0] == 'application/json'

    Examples:
      | read('productOrder_order.Id_patch.csv') |

  Scenario Outline: Update product order with invalid request payload
    Given path '/productOrder/<order.Id>'
    And request
      """
      {
        "order": {
          "associatedDocument": "<associatedDocument>",
          "correlationOrder": "<correlationOrder>",
          "customer": {
            "workContact": {
              "email": "<customer.workContact.email>",
              "name": "<customer.workContact.name>",
              "phone": <customer.workContact.phone>
            }
          },
          "issue": {
            "action": "<issue.action>",
            "code": "<issue.code>",
            "observation": "<issue.observation>",
            "updateDate": "<issue.updateDate>"
          }
        }
      }
      """
    When method PATCH
    Then status 400
    And match response ==
      """
      {
        "control": {
          "code": "400",
          "message": "Bad Request",
          "type": "E"
        }
      }
      """
    And match responseHeaders['Content-Type'][0] == 'application/json'

    Examples:
      | order.Id       | associatedDocument | correlationOrder | customer.workContact.email | customer.workContact.name | customer.workContact.phone | issue.action | issue.code | issue.observation                         | issue.updateDate    |
      | 20230315000001 | VTT001             |               10 | sindicovtal@vtal.com       | síndico Vtal              |                21999900000 | fechar       |       7100 | Resolução de pendência de contato de obra | 2021-12-09T15:20:00 |

  Scenario: Update product order with non-existent order id
    Given path '/productOrder/999999999'
    And request
      """
      {
        "order": {
          "appointment": {
            "date": "2021-06-07T12:47:00",
            "hasSlot": true,
            "mandatoryType": "Permitido",
            "workOrderId": ""
          },
          "associatedDocument": "VTT001",
          "correlationOrder": "10",
          "issue": {
            "action": "fechar",
            "code": "7016",
            "observation": "Reagendamento por ausência",
            "updateDate": "2021-12-09T15:20:00"
          }
        }
      }
      """
    When method PATCH
    Then status 404
    And match response ==
      """
      {
        "control": {
          "code": "404",
          "message": "Not Found",
          "type": "E"
        }
      }
      """
    And match responseHeaders['Content-Type'][0] == 'application/json'

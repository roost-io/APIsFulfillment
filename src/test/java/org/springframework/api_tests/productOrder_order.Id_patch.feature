# ********RoostGPT********

# Test generated by RoostGPT for test APIs-Fulfillment using AI Type Open AI and AI Model gpt-4-turbo
# 
# Feature file generated for /productOrder/{order.Id}_patch for http method type PATCH 
# RoostTestHash=baabcd7d73
# 
# 

# ********RoostGPT********
Feature: Patch Product Order By Id

  Background:
    * def urlBase = karate.properties['url.base'] || karate.get('urlBase', 'http://localhost:8080')
    * url urlBase
    * def authToken = karate.properties['AUTH_TOKEN']
    * header Authorization = 'Bearer ' + authToken

  Scenario Outline: Update product order with valid data
    Given path '<order_Id>'
    And request 
    """
    <requestBody>
    """
    When method patch
    Then status 200
    And match response == 
    """
    <expectedResponse>
    """

    Examples:
      | order_Id         | requestBody                                                                                                          | expectedResponse                                |
      | '20230315000001' | { "order": { "correlationOrder": "10", "associatedDocument": "VTT001", "type": "Instalacao", "infraType": "FTTH" } } | { "type": "S", "message": "OK", "code": "200" } |
      | '20230315000002' | { "order": { "correlationOrder": "20", "associatedDocument": "VTT002", "type": "Retirada", "infraType": "FTTP" } }   | { "type": "S", "message": "OK", "code": "200" } |

  Scenario Outline: Update product order with invalid data
    Given path '<order_Id>'
    And request 
    """
    <requestBody>
    """
    When method patch
    Then status 400
    And match response == 
    """
    <expectedResponse>
    """

    Examples:
      | order_Id         | requestBody                                                                                                        | expectedResponse                                         |
      | '20230315000001' | { "order": { "correlationOrder": "", "associatedDocument": "VTT001", "type": "Instalacao", "infraType": "FTTH" } } | { "type": "E", "message": "Bad Request", "code": "400" } |
      | '20230315000002' | { "order": { "correlationOrder": "20", "associatedDocument": "", "type": "Retirada", "infraType": "FTTP" } }       | { "type": "E", "message": "Bad Request", "code": "400" } |

  Scenario: Unauthorized access to update product order
    Given path '20230315000001'
    And request 
    """
    { "order": { "correlationOrder": "10", "associatedDocument": "VTT001", "type": "Instalacao", "infraType": "FTTH" } }
    """
    * header Authorization = 'Bearer invalid_token'
    When method patch
    Then status 401
    And match response == 
    """
    { "type": "E", "message": "Unauthorized", "code": "401" }
    """

# ********RoostGPT********

# Test generated by RoostGPT for test vtal-api using AI Type Open AI and AI Model gpt-4o-2024-05-13
# 
# Feature file generated for /appointmentConfirmation_post for http method type POST 
# RoostTestHash=cff6ff5663
# 
# 

# ********RoostGPT********
Feature: Appointment Confirmation API

  Background:
    * def urlBase = karate.properties['url.base'] || karate.get('urlBase', 'http://localhost:4010')
    * url urlBase
    * def AUTH_TOKEN = karate.properties['AUTH_TOKEN']
    * header Authorization = 'Bearer ' + AUTH_TOKEN

  Scenario Outline: Successful Appointment Confirmation
    Given request """ 
    { 
      "customer": { "subscriberId": "<subscriberId>" }, 
      "appointment": { "id": "<appointmentId>", "confirmation": <confirmation> } 
    }
    """
    When method POST
    Then status 200
    And match response.control == { type: 'S', code: '200', message: 'OK' }

    Examples:
      | subscriberId | appointmentId | confirmation |
      | VTAL001      | SA-562403     | true         |
      | VTAL002      | SA-562404     | true         |

  Scenario Outline: Bad Request
    Given request """ 
    { 
      "customer": { "subscriberId": "<subscriberId>" }, 
      "appointment": { "id": "<appointmentId>", "confirmation": <confirmation> } 
    }
    """
    When method POST
    Then status 400
    And match response.control == { type: 'E', code: '400', message: 'Bad Request' }

    Examples:
      | subscriberId | appointmentId | confirmation |
      | VTAL001      |               | true         |
      |              | SA-562403     | true         |

  Scenario: Unauthorized
    Given request """
    { 
      "customer": { "subscriberId": "VTAL001" }, 
      "appointment": { "id": "SA-562403", "confirmation": true } 
    }
    """
    And header Authorization = 'Bearer invalid_token'
    When method POST
    Then status 401
    And match response.control == { type: 'E', code: '401', message: 'Unauthorized' }

  Scenario: Forbidden - Scope Not Permitted
    Given request """
    { 
      "customer": { "subscriberId": "VTAL001" }, 
      "appointment": { "id": "SA-562403", "confirmation": true } 
    }
    """
    And header Authorization = 'Bearer expired_token'
    When method POST
    Then status 403
    And match response.control == { type: 'E', code: '403', message: 'Forbidden - Scope Not Permitted' }

  Scenario: Not Found
    Given request """
    { 
      "customer": { "subscriberId": "VTAL001" }, 
      "appointment": { "id": "SA-999999", "confirmation": true } 
    }
    """
    When method POST
    Then status 404
    And match response.control == { type: 'E', code: '404', message: 'Not Found' }

  Scenario: Not Acceptable
    Given request """
    { 
      "customer": { "subscriberId": "VTAL001" }, 
      "appointment": { "id": "SA-562403", "confirmation": "invalid_boolean" } 
    }
    """
    When method POST
    Then status 406
    And match response.control == { type: 'E', code: '406', message: 'Not Acceptable' }

  Scenario: Precondition Failed
    Given request """
    { 
      "customer": { "subscriberId": "VTAL001" }, 
      "appointment": { "id": "SA-562403", "confirmation": true } 
    }
    """
    And header If-Match = 'invalid_etag'
    When method POST
    Then status 412
    And match response.control == { type: 'E', code: '412', message: 'Precondition Failed' }

  Scenario: Too Many Requests
    Given request """
    { 
      "customer": { "subscriberId": "VTAL001" }, 
      "appointment": { "id": "SA-562403", "confirmation": true } 
    }
    """
    When method POST
    And repeat until status == 429
    Then match response.control == { type: 'E', code: '429', message: 'Too Many Requests - Exceeded Quota' }

  Scenario: Internal Server Error
    Given request """
    { 
      "customer": { "subscriberId": "VTAL001" }, 
      "appointment": { "id": "SA-562403", "confirmation": true } 
    }
    """
    And header Simulate-Error = '500'
    When method POST
    Then status 500
    And match response.control == { type: 'T', code: '500', message: 'Internal Server Error' }

  Scenario: Service Unavailable
    Given request """
    { 
      "customer": { "subscriberId": "VTAL001" }, 
      "appointment": { "id": "SA-562403", "confirmation": true } 
    }
    """
    And header Simulate-Error = '503'
    When method POST
    Then status 503
    And match response.control == { type: 'T', code: '503', message: 'Service Unavailable' }

  Scenario: Gateway Timeout
    Given request """
    { 
      "customer": { "subscriberId": "VTAL001" }, 
      "appointment": { "id": "SA-562403", "confirmation": true } 
    }
    """
    And header Simulate-Error = '504'
    When method POST
    Then status 504
    And match response.control == { type: 'T', code: '504', message: 'Gateway Timeout' }

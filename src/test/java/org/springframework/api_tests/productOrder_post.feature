# ********RoostGPT********

# Test generated by RoostGPT for test APIs-Fulfillment using AI Type Open AI and AI Model gpt-4-turbo
# 
# Feature file generated for /productOrder_post for http method type POST 
# RoostTestHash=13e6a9adf7
# 
# 

# ********RoostGPT********
Feature: Product Order Management System

  Background:
    * def urlBase = karate.properties['url.base'] || karate.get('urlBase', 'http://localhost:8080')
    * url urlBase
    * def authToken = karate.properties['AUTH_TOKEN']
    * header Authorization = 'Bearer ' + authToken

  Scenario Outline: Validate successful creation of a product order with different order types and infrastructures
    Given path '/productOrder'
    And request <requestBody>
    When method POST
    Then status 201
    And match response == <expectedResponse>

    Examples:
      | requestBody                                                                                      | expectedResponse                                                                           |
      | read('classpath:examples/Installation_Order_Type_FTTH.json')                                     | { control: { type: 'S', code: '201', message: 'Created' }, order: { id: '#regex[\\d]+' } } |
      | read('classpath:examples/Installation_Order_Type_FTTP.json')                                     | { control: { type: 'S', code: '201', message: 'Created' }, order: { id: '#regex[\\d]+' } } |
      | read('classpath:examples/Installation_Order_Type_FTTH_with_partial_viability.json')              | { control: { type: 'S', code: '201', message: 'Created' }, order: { id: '#regex[\\d]+' } } |
      | read('classpath:examples/Installation_Order_Type_FTTH_arising_from_address_change_flagged.json') | { control: { type: 'S', code: '201', message: 'Created' }, order: { id: '#regex[\\d]+' } } |
      | read('classpath:examples/Removal_Order_Type_FTTH.json')                                          | { control: { type: 'S', code: '201', message: 'Created' }, order: { id: '#regex[\\d]+' } } |
      | read('classpath:examples/Total_Block_Order_Type_FTTP.json')                                      | { control: { type: 'S', code: '201', message: 'Created' }, order: { id: '#regex[\\d]+' } } |
      | read('classpath:examples/Unblock_Order_Type_FTTH.json')                                          | { control: { type: 'S', code: '201', message: 'Created' }, order: { id: '#regex[\\d]+' } } |
      | read('classpath:examples/Associate_CPE_Order_Type_FTTP.json')                                    | { control: { type: 'S', code: '201', message: 'Created' }, order: { id: '#regex[\\d]+' } } |
      | read('classpath:examples/Speed_Modification_Order_Type_FTTH.json')                               | { control: { type: 'S', code: '201', message: 'Created' }, order: { id: '#regex[\\d]+' } } |
      | read('classpath:examples/Point_Relocation_Order_Type_FTTH.json')                                 | { control: { type: 'S', code: '201', message: 'Created' }, order: { id: '#regex[\\d]+' } } |

  Scenario: Attempt to create a product order with an invalid type
    Given path '/productOrder'
    And request read('classpath:examples/Invalid_Order_Type.json')
    When method POST
    Then status 400
    And match response == { control: { type: 'E', code: '400', message: 'Bad Request' } }

  Scenario: Unauthorized access attempt to create a product order
    Given path '/productOrder'
    And request read('classpath:examples/Valid_Order_Request.json')
    And remove header Authorization
    When method POST
    Then status 401
    And match response == { control: { type: 'E', code: '401', message: 'Unauthorized' } }

  Scenario: Access forbidden due to scope not permitted
    Given path '/productOrder'
    And request read('classpath:examples/Valid_Order_Request.json')
    And header Authorization = 'Bearer invalid_token'
    When method POST
    Then status 403
    And match response == { control: { type: 'E', code: '403', message: 'Forbidden - Scope Not Permitted' } }

  Scenario: Create product order when service is unavailable
    Given path '/productOrder'
    And request read('classpath:examples/Valid_Order_Request.json')
    When method POST
    Then status 503
    And match response == { control: { type: 'T', code: '503', message: 'Service Unavailable' } }

# ********RoostGPT********

# Test generated by RoostGPT for test fflive using AI Type Open AI and AI Model gpt-4-turbo
# 
# Feature file generated for /listener/productOrderInformationRequiredEvent_post for http method type POST 
# RoostTestHash=e74b642c2e
# 
# 

# ********RoostGPT********
Feature: Product Order Information Required Event

  Background:
    * def urlBase = karate.properties['url.base'] || karate.get('urlBase', 'http://localhost:8080')
    * url urlBase
    * def authToken = karate.properties['AUTH_TOKEN']
    * header Authorization = 'Bearer ' + authToken

  Scenario Outline: Validate successful processing of product order information with various notification types
    Given path '/listener/productOrderInformationRequiredEvent'
    And request 
    """
    <requestBody>
    """
    When method POST
    Then status 204

    Examples:
      | requestBody                                                                                                                                                                                                                                                                                                                                                   |
      | { "notification": { "order": { "id": "20230315000001", "correlationOrder": "10", "associatedDocument": "VTT001", "issue": { "code": "7029", "description": "Pendencia de agendamento", "type": "CLIENTE", "observation": "", "updateDate": "2021-02-17T17:19:50-03:00", "action": "abrir", "task": "", "fieldActivity": "true", "reason": "PROJETO" } } } }   |
      | { "notification": { "order": { "id": "20230315000002", "correlationOrder": "11", "associatedDocument": "VTT002", "issue": { "code": "7030", "description": "Pendencia de rede", "type": "TECNICA", "observation": "", "updateDate": "2022-02-25T11:50:50.566-03:00", "action": "abrir", "task": "", "fieldActivity": "false", "reason": "MANUNTENÇÃO" } } } } |

  Scenario: Validate error handling for unauthorized access
    Given path '/listener/productOrderInformationRequiredEvent'
    And request 
    """
    { "notification": { "order": { "id": "20230315000003", "correlationOrder": "12", "associatedDocument": "VTT003", "issue": { "code": "7041", "description": "Pendencia técnica", "type": "TECNICA", "observation": "", "updateDate": "2022-03-01T12:00:00-03:00", "action": "abrir", "task": "", "fieldActivity": "true", "reason": "SEGURANÇA" } } } }
    """
    And header Authorization = 'InvalidToken'
    When method POST
    Then status 401

  Scenario: Validate response for server error
    Given path '/listener/productOrderInformationRequiredEvent'
    And request 
    """
    { "notification": { "order": { "id": "20230315000004", "correlationOrder": "13", "associatedDocument": "VTT004", "issue": { "code": "7051", "description": "Pendencia de aprovisionamento", "type": "TECNICA", "observation": "", "updateDate": "2022-03-02T13:30:00-03:00", "action": "abrir", "task": "", "fieldActivity": "false", "reason": "ATRASO" } } } }
    """
    When method POST
    Then status 500

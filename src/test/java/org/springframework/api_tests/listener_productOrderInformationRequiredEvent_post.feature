# ********RoostGPT********

# Test generated by RoostGPT for test APIs-Fulfillment using AI Type Open AI and AI Model gpt-4-turbo
# 
# Feature file generated for /listener/productOrderInformationRequiredEvent_post for http method type POST 
# RoostTestHash=e74b642c2e
# 
# 

# ********RoostGPT********
Feature: Product Order Information Required Event

  Background:
    * def urlBase = karate.properties['url.base'] || karate.get('urlBase', 'http://localhost:8080')
    * url urlBase
    * def authToken = karate.properties['AUTH_TOKEN']
    * header Authorization = 'Bearer ' + authToken

  Scenario Outline: Test POST request for Product Order Information Required Event with <description>
    Given path '/listener/productOrderInformationRequiredEvent'
    And request 
    """
    <body>
    """
    When method post
    Then status <status>
    And match response == 
    """
    <expectedResponse>
    """

    Examples:
      | description                       | status | body                                                                                                                                                                                                                                                                                                                                                                 | expectedResponse |
      | 'Notification client pendency'    |    204 | { "notification": { "order": { "id": "20230315000001", "correlationOrder": "10", "associatedDocument": "VTT001", "issue": { "code": "7029", "description": "Pendencia de agendamento", "type": "CLIENTE", "observation": "", "updateDate": "2021-02-17T17:19:50-03:00", "action": "abrir", "task": "", "fieldActivity": "true", "reason": "PROJETO" } } } }          | {}               |
      | 'Notification technical pendency' |    204 | { "notification": { "order": { "id": "20230315000001", "correlationOrder": "10", "associatedDocument": "VTT001", "issue": { "code": "7030", "description": "Pendencia de agendamento", "type": "TECNICA", "observation": "", "updateDate": "2022-02-25T11:50:50.566-03:00", "action": "abrir", "task": "", "fieldActivity": "false", "reason": "MANUNTENÇÃO" } } } } | {}               |

  Scenario: Unauthorized access to Product Order Information Required Event
    Given path '/listener/productOrderInformationRequiredEvent'
    And header Authorization = 'Bearer invalid_token'
    And request 
    """
    { "notification": { "order": { "id": "20230315000001", "correlationOrder": "10", "associatedDocument": "VTT001", "issue": { "code": "7029", "description": "Pendencia de agendamento", "type": "CLIENTE", "observation": "", "updateDate": "2021-02-17T17:19:50-03:00", "action": "abrir", "task": "", "fieldActivity": "true", "reason": "PROJETO" } } } }
    """
    When method post
    Then status 401

  Scenario: Server error simulation for Product Order Information Required Event
    Given path '/listener/productOrderInformationRequiredEvent'
    And request 
    """
    { "notification": { "order": { "id": "20230315000001", "correlationOrder": "10", "associatedDocument": "VTT001", "issue": { "code": "7029", "description": "Pendencia de agendamento", "type": "CLIENTE", "observation": "", "updateDate": "2021-02-17T17:19:50-03:00", "action": "abrir", "task": "", "fieldActivity": "true", "reason": "PROJETO" } } } }
    """
    When method post
    Then status 500
